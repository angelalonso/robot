#!/usr/bin/env bash

ENVFILE="brain/.env"
source ${ENVFILE} 

EXIT=0
TITLE_SHOWN=False

help()
{
  TITLE="SYNTAX:"
  RESULT="\
$0 get <parameter>\n \
  get \n \
    online - Get if the robot is online \n \
  do \n \
    reset - Reset the robot's outputs(motors, LEDs...) \n \
"
}

checkArgs()
{
  if [[ "$1" == "get" ]]; then
    getStuff $@
  elif [[ "$1" == "do" ]]; then
    doStuff $@
  else
    echo "ERROR: parameter not recognized: $1"
    help 
    EXIT=1
  fi
}

getStuff()
{
  if [[ "$2" == "" ]]; then
    echo "ERROR: missing parameter after $1"
    help 
    EXIT=1
  elif [[ "$2" == "online" ]]; then
    getIsOnline
  else
    echo "ERROR: parameter not recognized: $2"
    help 
    EXIT=1
  fi
}

getIsOnline()
{
  TITLE="ITEM    IS_ONLINE"
  online="False"
  retries=0
  while [[ $retries < 4 ]] && [ "$online" != "True" ]; do
    retries=$((retries+1))
    ping ${HOST} -c 1 > /dev/null
    if [[ $? -eq 0 ]]; then
      online="True"
    fi
  done
  if [[ "$online" == "True" ]]; then
    RESULT="Robot   True"
    EXIT=0
  else
    RESULT="Robot   False"
    EXIT=1
  fi
}

doStuff()
{
  if [[ "$2" == "" ]]; then
    echo "ERROR: missing parameter after $1"
    help 
    EXIT=1
  elif [[ "$2" == "reset" ]]; then
    doReset
  elif [[ "$2" == "compile" ]]; then
    doCompile
  elif [[ "$2" == "gitpush" ]]; then
    doGitPush
  elif [[ "$2" == "run" ]]; then
    doRun
  elif [[ "$2" == "test" ]]; then
    doTest
  else
    echo "ERROR: parameter not recognized: $2"
    help 
    EXIT=1
  fi
}

doReset()
{
  getIsOnline
  TITLE="ITEM    RESET"
  if [[ "${RESULT}" != "Robot   True" ]]; then
      RESULT="Robot   Error: NOT Online"
  else
    ${SSH_COMM} "kill \$(ps aux | grep brain | grep setup | awk '{print \$2}')" > /dev/null 2>&1
    EXIT=$?
    if [[ $EXIT -eq 0 ]]; then
      ${SSH_COMM} "cd robot/brain; \
        RUST_LOG=info target/arm-unknown-linux-gnueabihf/debug/brain reset setup_reset.yaml
        " > /dev/null 2>&1
        EXIT=$?
      if [[ $EXIT -eq 0 ]]; then
        ${SSH_COMM} "kill \$(ps aux | grep brain | grep cfg | awk '{print \$2}')" > /dev/null 2>&1
        EXIT=$?
        if [[ $EXIT -eq 0 ]]; then
          RESULT="Robot   True"
        else
          RESULT="Robot   Error: "$EXIT
        fi
      else
        RESULT="Robot   Error: "$EXIT
      fi
    else
      RESULT="Robot   Error: "$EXIT
    fi
  fi
}

doCompile()
{
  TITLE="ITEM    COMPILE"
  CWD=$(pwd)
  cd brain
  cross build --target=arm-unknown-linux-gnueabihf > /dev/null 2>&1
  EXIT=$?
  cd ${CWD}
  if [[ $EXIT -eq 0 ]]; then
    RESULT="Robot   True"
  else
    RESULT="Robot   Error: "$EXIT
  fi
}

doGitPush()
{
  git checkout ${DEV_BRANCH} > /dev/null 2>&1
  git add .  > /dev/null 2>&1
  git commit -m "updating and uploading" > /dev/null 2>&1
  git push origin ${DEV_BRANCH} > /dev/null 2>&1
  EXIT=$?
  if [[ $EXIT -eq 0 ]]; then
    RESULT="Robot   True"
  else
    RESULT="Robot   Error: "$EXIT
  fi
}

doRun()
{
  doCompile
  TITLE="ITEM    RUN"
  echo "${TITLE}"
  TITLE_SHOWN="True"
  if [[ "${RESULT}" != "Robot   True" ]]; then
    RESULT="Robot   Error: Compilation failed"
  else
    RESULT="Robot   OK: Compilation"
    echo -e "${RESULT}"
    doGitPush
    if [[ "${RESULT}" != "Robot   True" ]]; then
      RESULT="Robot   Error: Updating Git branch failed"
    else
      RESULT="Robot   OK: Updating git branch"
      echo -e "${RESULT}"
      doReset
      if [[ "${RESULT}" != "Robot   True" ]]; then
        RESULT="Robot   Error: Reset failed"
      else
        RESULT="Robot   OK: Resetting"
        echo -e "${RESULT}"
        RESULT="Robot   Run ..."
        echo -e "${RESULT}"
        ${SSH_COMM} "cd robot/brain; git pull; git checkout ${DEV_BRANCH} && git stash; git stash drop; git pull && \
          RUST_LOG=info target/arm-unknown-linux-gnueabihf/debug/brain live setup.yaml
          " > /dev/null 2>&1
        EXIT=$?
        if [[ $EXIT -eq 0 ]]; then
          RESULT="Robot   True"
        else
          RESULT="Robot   Error: "$EXIT
        fi
      fi
    fi
  fi
}

doTest()
{
  TITLE="ITEM    TEST_PASSED"
  echo "${TITLE}"
  TITLE_SHOWN="True"
  CWD=$(pwd)
  cd brain
  cargo test -- > /dev/null 2>&1
  EXIT=$?
  cd ${CWD}
  if [[ $EXIT -eq 0 ]]; then
    RESULT="Robot   True"
    echo "${RESULT}"
    echo 
    TITLE="ITEM    OFFLINE_TEST"
    echo "${TITLE}"
    RESULT="Robot   Running..."
    echo "${RESULT}"
    CWD=$(pwd)
    cd brain
    RUST_LOG=info cargo run test setup.yaml
    EXIT=$?
    cd ${CWD}
    if [[ $EXIT -eq 0 ]]; then
      RESULT="Robot   True"
    else
      RESULT="Robot   Error: "$EXIT
    fi
  else
    RESULT="Robot   Error: "$EXIT
  fi
}

main()
{
  checkArgs $@
  if [[ "${TITLE_SHOWN}" == "False" ]]; then
    echo "${TITLE}"
  fi
  echo -e "${RESULT}"
  exit $EXIT
}

main $@
