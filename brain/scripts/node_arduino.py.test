#!/usr/bin/env python3

from random import seed
from random import randint
import time
import hashlib

import rclpy
from rclpy.node import Node
from processing import process_input

class SerialLink(Node):

    def __init__(self):
        super().__init__('arduino_serial_sync_mocked')

    def get_value(self):
        seed(round(time.time() * 1000))
        mocked_distance = randint(1, 999)
        seed(round(time.time() * 1000))
        random_repeated = randint(0, 99)
        value = ("SENSOR: distance=" + str(mocked_distance) + "|\r\n")
        if ( random_repeated < 20 ):
            value += ("SENSOR: distance=" + str(mocked_distance - 1) + "|\r\n")
        return value

    def sync_and_read(self):
        while True:
            self.get_logger().info(process_input(self.get_value()))
            time.sleep(1)


def main(args=None):
    rclpy.init(args=args)

    arduino_serial = SerialLink()

    arduino_serial.sync_and_read()

    rclpy.shutdown()

if __name__ == '__main__':
    main()
