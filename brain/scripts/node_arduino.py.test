#!/usr/bin/env python3

from random import seed
from random import randint
import time
import hashlib

import rclpy
from rclpy.node import Node

class SerialLink(Node):

    def __init__(self):
        super().__init__('arduino_serial_sync_mocked')

    def get_value(self):
        seed(round(time.time() * 1000))
        mocked_distance = randint(0, 999)
        value = ("SENSOR: distance=" + str(mocked_distance) + "|")
        return value

    def process(self, msg):
        #TODO: 
        # filter out noise
        # get one value on each run, or nothing (in the event of several, calculate median maybe?)
        self.get_logger().info(msg)

    def sync_and_read(self):
        while True:
            self.process(self.get_value())
            time.sleep(1)


def main(args=None):
    rclpy.init(args=args)

    arduino_serial = SerialLink()

    arduino_serial.sync_and_read()

    rclpy.shutdown()

if __name__ == '__main__':
    main()
