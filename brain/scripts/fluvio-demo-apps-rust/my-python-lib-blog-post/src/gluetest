pub struct Datapoint {
    x: i32,
    y: i32,
    solid: bool,
}
pub struct Dataset {
    set: Vec<Datapoint>,
}
impl Dataset {
    pub fn new(set: Vec<Datapoint>) -> Self {
        Self {
            set
        }
    }
    pub fn show(&self) -> Vec<String> {
        let mut result = Vec::new();
        for x in 1..11 {
            let mut line = "".to_owned();
            for y in 1..11 {
                let mut object = false;
                for dp in self.set.clone() {
                    if dp.x == x && dp.y == y && dp.solid {
                        object = true;
                    }
                }
                if object {
                    line.push_str("O");
                } else {
                    line.push_str(".");
                }
            }
            result.push(line);
        }
        result
    }
}
foreign_class!(class Dataset {
    self_type Dataset;
    constructor Dataset::new(_: Vec<Datapoint>) -> Dataset;
    fn Dataset::show(&self) -> Vec<String> {
});
