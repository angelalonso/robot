#include <functional>
#include <future>
#include <memory>
#include <string>
#include <sstream>

#include "action_interfaces/action/led.hpp"

#include "rclcpp/rclcpp.hpp"
#include "rclcpp_action/rclcpp_action.hpp"
#include "rclcpp_components/register_node_macro.hpp"

namespace circuit_nodes {
  class LedActionClient : public rclcpp::Node {
    public:
      using Led = action_interfaces::action::Led;
      using GoalHandleLed = rclcpp_action::ClientGoalHandle<Led>;

      explicit LedActionClient(const rclcpp::NodeOptions & options)
      : Node("led_action_client", options) {
        this->client_ptr_ = rclcpp_action::create_client<Led>(
          this,
          "led");

        this->timer_ = this->create_wall_timer(
          std::chrono::milliseconds(500),
          std::bind(&LedActionClient::send_goal, this));
      }

      void send_goal() {
        using namespace std::placeholders;

        this->timer_->cancel();

        if (!this->client_ptr_->wait_for_action_server()) {
          RCLCPP_ERROR(this->get_logger(), "Action server not available after waiting");
          rclcpp::shutdown();
        }

        auto goal_msg = Led::Goal();
        goal_msg.turn_on = false;

        RCLCPP_INFO(this->get_logger(), "Sending goal");

        auto send_goal_options = rclcpp_action::Client<Led>::SendGoalOptions();
        send_goal_options.goal_response_callback =
          std::bind(&LedActionClient::goal_response_callback, this, _1);
        send_goal_options.feedback_callback =
          std::bind(&LedActionClient::feedback_callback, this, _1, _2);
        send_goal_options.result_callback =
          std::bind(&LedActionClient::result_callback, this, _1);
        this->client_ptr_->async_send_goal(goal_msg, send_goal_options);
      }

    private:
      rclcpp_action::Client<Led>::SharedPtr client_ptr_;
      rclcpp::TimerBase::SharedPtr timer_;

      void goal_response_callback(std::shared_future<GoalHandleLed::SharedPtr> future) {
        auto goal_handle = future.get();
        if (!goal_handle) {
          RCLCPP_ERROR(this->get_logger(), "Goal was rejected by server");
        } else {
          RCLCPP_INFO(this->get_logger(), "Goal accepted by server, waiting for result");
        }
      }

      void feedback_callback(
        GoalHandleLed::SharedPtr,
        const std::shared_ptr<const Led::Feedback> feedback) {
          std::stringstream ss;
          ss << "Next number in confirmed received: ";
          for (auto number : feedback->process_feed) {
            ss << number << " ";
        }
        RCLCPP_INFO(this->get_logger(), ss.str().c_str());
      }

      void result_callback(const GoalHandleLed::WrappedResult & result) {
        switch (result.code) {
          case rclcpp_action::ResultCode::SUCCEEDED:
            break;
          case rclcpp_action::ResultCode::ABORTED:
            RCLCPP_ERROR(this->get_logger(), "Goal was aborted");
            return;
          case rclcpp_action::ResultCode::CANCELED:
            RCLCPP_ERROR(this->get_logger(), "Goal was canceled");
            return;
          default:
            RCLCPP_ERROR(this->get_logger(), "Unknown result code");
            return;
        }
        std::stringstream ss;
        ss << "Result received: ";
        for (auto number : result.result->confirmed) {
          ss << number << " ";
        }
        RCLCPP_INFO(this->get_logger(), ss.str().c_str());
        rclcpp::shutdown();
      }
  };  // class LedActionClient

}  // namespace circuit_nodes

RCLCPP_COMPONENTS_REGISTER_NODE(circuit_nodes::LedActionClient)
